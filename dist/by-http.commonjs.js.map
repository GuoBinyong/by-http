{"version":3,"sources":["webpack://ByHttp/webpack/bootstrap","webpack://ByHttp/external {\"root\":\"dc\",\"commonjs\":\"done-count\",\"commonjs2\":\"done-count\",\"amd\":\"done-count\"}","webpack://ByHttp/external \"axios\"","webpack://ByHttp/./src/index.js","webpack://ByHttp/external {\"root\":\"\",\"commonjs\":\"es-expand\",\"commonjs2\":\"es-expand\",\"amd\":\"es-expand\"}"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","_doneAgainProxyProps","ByHttp","reqTransforms","publicData","resTransforms","mainData","mainDataGet","validateHttpStatus","validateDataStatus","successPrompt","failPrompt","promptHandle","showLoading","loadingDelay","loadText","startLoadingHandle","endLoadingHandle","dependent","dependentPro","dependResultHandle","addInfoInRes","doneAgain","loadingDoneAgain","requestDoneAgain","startRequestHandle","endRequestHandle","header","otherConfig","caseType","separator","defaultConfig","headers","validateStatus","responseType","findValueForKeyFormats","this","propFormats","responsetype","axios","step","undefined","loadingShowCount","newValue","_loadingDoneCountManager","doneCountManager","NamedDoneCountManager","urlAsDoneCountName","defineProxyProperties","loadingDoneCountManager","assign","_requestDoneCountManager","requestDoneCountManager","constructor","incrLoadingShowCount","decrLoadingShowCount","httpDoneAgainOpts","global","unsafeDoneAgain","register","methods","defaults","Array","isArray","forEach","method","toLowerCase","methodHeader","commonHeader","finalHeader","reqOptions","params","data","FormData","keys","set","haveHttpBodyMethods","includes","mergeDCOptions","urlPath","_perfectDoneAgainOptions","doneAgainOpts","forLoading","failDoneAgain","namesOrNum","names","doneNum","doneAgainOther","failDAType","then","dependentResult","depReqOptions","Promise","reject","_request","addPublicOptions","addPublicData","reduce","options","transform","httpDoneAgainOptsMap","_mergeDoneAgainOptions","loadingDoneCount","registerDoneCount_Loading","requestDoneCount","registerDoneCount_Request","reqConfig","url","findValueOfKeys","valHttpStatus","status","some","valiStatus","Number","String","loadingIsStarted","performStartLoadHandle","showCount","globalShowCount","doneCount","http","loadingTimeoutID","setTimeout","completeHandle","succeed","respData","unsafeDoneAgain_Loading","unsafeDoneAgain_Request","loadingDoneAgainOnFail","loadingDoneCountOnFail","doneAgain_Loading","requestDoneAgainOnFail","requestDoneCountOnFail","clearTimeout","doneCountOnFail","axiosPromise","request","response","res","error","throwData","contentType","_reqTransforms","_resTransforms","_dependentResolve","_dependentPro","resolve","headerKey","_mainDataGet","responseData","baseURL","JSON","stringify","setHeaders"],"mappings":"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","file":"by-http.commonjs.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = require(\"done-count\");","module.exports = require(\"axios\");","import axios from 'axios'\nimport {NamedDoneCountManager} from 'done-count'\nimport \"es-expand\"\n\n/**\n * loadingDoneAgain 和 requestDoneAgain 配置对象 代理 DoneCountManager 属性列表\n */\nconst _doneAgainProxyProps = [\"urlAsDoneCountName\",\"conflictPolicy\",\"autoIncrTotalIfRepeat\",\"autoDeleteTarget\",\"autoDeleteMode\",\"clearDelay\"];\n\nexport class ByHttp {\n  /**\n   * 创建HTTP请求对象\n   * @param httpConfig : Object  HTTP的配置对象，\n   *\n   * httpConfig 中可配置的字段如下：\n   *\n   * baseURL : string    基URL\n   * method  : string    默认的请求方式\n   * publicData : Object | (reqOptions)=>Object  公共的参数 或者是 用来获取公共参数的函数，会对所有请求都追加些参数\n   * reqTransforms : [(ReqOptions)=>ReqOptions]  转换请求选项的转换函数数组，用于对reqOptions进行转换，也可以在函数里给数据添加一些公共的参数\n   * resTransforms : [(Response,ReqOptions)=>Response]  转换响应的转换函数数组，用于对 response 进行转换；\n   * headers  : Object    默认的请求头对象\n   * reqOptions.responseType : string         表明服务器返回的数据类型，如：'json','text' 等等\n   * mainData  : boolean    当请求成功时，是否返回经过 mainDataGet 处理过的数据；\n   * mainDataGet  : (responseData:any)=>mainData:any    如果 mainData 设置为 true，当请求成功时，会返回被 mainDataGet 处理过的数据；\n   * successPrompt : boolean    是否启用全局的成功提示；\n   * promptHandle : (info:data | error,success:boolean)=>Void    请求成功或者失败的回调函数\n   * failPrompt  : boolean    是启用用全局的失败提示;\n   * showLoading  : boolean    是否启用加载状态指示；默认值为 true\n   * loadingDelay  : number    加载状态指示的延时显示时间，单位：毫秒；默认值：0\n   * loadText  : string   加载的提示文本\n   * startLoadingHandle : (loadText:string,reqOptions:ReqOptions,{showCount:number,globalShowCount:number,doneCount:DoneCount,doneCountManager:DoneCountManager,http:ByHttp})=>showCountIncrStep : number | undefined  开始显示 loading 的回调函数；返回 加载状态指示显示计数 loadingShowCount 的 增加量；\n   * endLoadingHandle  : (succeed,reqOptions:ReqOptions,resData:ResponseData,{showCount:number,globalShowCount:number,doneCount:DoneCount,doneCountOnFail:DoneCount,doneCountManager:DoneCountManager,http:ByHttp})=>showCountDecrStep : number | undefined   结束显示 loading 的回调函数；返回 加载状态指示显示计数 loadingShowCount 的 减少量；\n   *\n   * startRequestHandle : (reqOptions,addInfo:RequestHandleAddInfo)=>Void     请求开始的回调函数\n   * endRequestHandle :  (succeed,reqOptions:ReqOptions,resData:ResponseData,addInfo:RequestHandleAddInfo)=>Void    请求结束的回调函数；\n   *\n   *\n   * dependent : boolean   设置请求是否依赖 dependentPro\n   * dependentPro : Promise 请求的依赖项，当请求有依赖时，请求会 等到 dependentPro 解决之后触发\n   * dependResultHandle : (result,reqOptions)=> HandleResult : ReqOptions || boolean || null || undefined    依赖结果处理器，当请求有依赖时，在 依赖解决之后 请求解决之前 调用该处理器；\n   * 注意：\n   * - 当 HandleResult 为 false 时，会取消请求；\n   * - 当 HandleResult 为 非假值时， 会使用 HandleResult 进行请求；\n   * - 当 HandleResult 为 除 false 之外的假值时，会使用 原来的 reqOptions 进行请求；\n   * @returns AxiosPromise    请求的 AxiosPromise 对象\n   *\n   *\n   * validateHttpStatus ?: number | string | Array<status> | (status: number) => boolean    定义 有效的 http返回状态码，可以是有效状态码 或 有效状态码的数组，也可以是返回表示状态码是否有效的布尔值的函数，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   * validateDataStatus ?: (responseData: any,reqOptions:ReqOptions) => boolean   定义 后台数据的返回的状态码的 的有效性，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   *\n   *\n   * addInfoInRes ?: boolean    可选；默认值：false；是否在响应数据中添加额外的信息； 当值为 true 时，会在失败 或 成功时返回一个数组，数据的中第1个元素就是请求真正的响应数据 或 错误信息，第2个元素是这种格式的对象 : {doneCount:DoneCount,doneCountManager:DoneCountManager,http:ByHttp}\n   * doneAgain ?: HttpDoneAgainOptions    可选；完成计数的配置对象；如果 loadingDoneAgain 或 requestDoneAgain 未配置，则会采用 doneAgain；\n   * loadingDoneAgain ?: HttpDoneAgainOptions   可选；loading完成计数的配置对象；如果 loadingDoneAgain  未配置，则会采用 doneAgain；\n   * requestDoneAgain ?: HttpDoneAgainOptions   可选；request完成计数的配置对象；如果 requestDoneAgain  未配置，则会采用 doneAgain；\n   *\n   * doneAgain.urlAsDoneCountName ?: boolean  可选；默认值：false； 当 DoneCount 选项中没有设置 namesOrNum 、 names 、 doneNum 选项时，是否将 urlPath 的值 作为 names 选项的值；\n   *\n   *\n   *\n   *\n   * # 类型定义\n   *\n   * RequestHandleAddInfo = {\n        loadText:string,showCount:number,globalShowCount:number,,\n        loadingDoneAgain,loadingDoneCount:DoneCount,loadingDoneCountOnFail:DoneCount,loadingDoneCountManager:DoneCountManager,\n        requestDoneAgain,requestDoneCount:DoneCount,requestDoneCountOnFail:DoneCount,requestDoneCountManager:DoneCountManager,\n        http:ByHttp}\n   *\n   *\n   *\n   * HttpDoneAgainOptions = {\n   *    urlAsDoneCountName:boolean,\n   *    conflictPolicy:ConflictPolicy,\n   *    autoIncrTotalIfRepeat:boolean,\n   *    autoDeleteTarget:AutoDeleteTarget\n   *    autoDeleteMode:AutoDeleteMode,\n   *    clearDelay:number,\n   *    failDoneAgain: Names | DoneNum | HttpDoneAgainOptions,    可选；当请求失败时附加应用的 完成计数的配置对象，注意：本次请求配置的 完成计数配置对象 也会被应用；\n   *    ...DoneCountProps}\n   *\n   * ConflictPolicy = \"Add\" | \"Reset\" | \"Recreate\" | \"Update\"\n   * AutoDeleteTarget = \"ForcedDone\" | \"RealDone\" | \"Done\"\n   * AutoDeleteMode = \"Delay\" | \"Immediately\" | \"No\"\n   */\n  constructor({reqTransforms, publicData, resTransforms, mainData, mainDataGet, validateHttpStatus, validateDataStatus, successPrompt, failPrompt, promptHandle, showLoading = true,loadingDelay=0, loadText, startLoadingHandle, endLoadingHandle, dependent, dependentPro, dependResultHandle,addInfoInRes,doneAgain,loadingDoneAgain,requestDoneAgain,startRequestHandle,endRequestHandle,header, ...otherConfig}) {\n\n    let defaultConfig = {headers:header,...otherConfig};\n\n    if (validateHttpStatus) {\n      defaultConfig.validateStatus = validateHttpStatus;\n    }\n\n    let responseType = defaultConfig.findValueForKeyFormats(\"responseType\", this.propFormats);\n    if (responseType) {\n      defaultConfig.responsetype = responseType;\n    }\n\n    this.axios = axios.create(defaultConfig);\n\n\n    this.publicData = publicData;\n    this.reqTransforms = reqTransforms;\n    this.resTransforms = resTransforms;\n    this.mainDataGet = mainDataGet;\n    this.successPrompt = successPrompt;\n    this.failPrompt = failPrompt;\n    this.mainData = mainData;\n\n    this.showLoading = showLoading;\n    this.loadingDelay = loadingDelay;\n    this.loadText = loadText;\n    this.startLoadingHandle = startLoadingHandle;\n    this.endLoadingHandle = endLoadingHandle;\n    this.promptHandle = promptHandle;\n\n    this.startRequestHandle = startRequestHandle;\n    this.endRequestHandle = endRequestHandle;\n\n\n    this.dependent = dependent;\n    this.dependentPro = dependentPro;\n    this.dependResultHandle = dependResultHandle;\n\n    this.validateDataStatus = validateDataStatus;\n    this.addInfoInRes = addInfoInRes;\n\n    this.loadingDoneAgain = loadingDoneAgain || doneAgain;\n    this.requestDoneAgain = requestDoneAgain || doneAgain;\n\n  }\n\n\n  //显示计数：开始\n\n  /**\n   * 全局的 加载状态指示的显示计数\n   */\n  static loadingShowCount = 0;\n\n\n  /**\n   * 将 全局的 加载状态指示的显示计数 loadingShowCount 增加 step\n   * @param step ? : number 默认值:1; 增加的数量；\n   * @returns number 增加后的 显示计数 loadingShowCount 值\n   */\n  static incrLoadingShowCount(step){\n    step = step == undefined ? 1 : step;\n    return this.loadingShowCount += step;\n  }\n\n  /**\n   * 将 全局的 加载状态指示的显示计数 loadingShowCount 减少 step\n   * @param step ? : number 默认值:1; 减少的数量；\n   * @returns number 减少后的 显示计数 loadingShowCount 值\n   */\n  static decrLoadingShowCount(step){\n    step = step == undefined ? 1 : step;\n    return this.loadingShowCount -= step;\n  }\n\n\n\n  /**\n   * 加载状态指示的显示计数\n   */\n  loadingShowCount = 0;\n\n  /**\n   * 将 加载状态指示的显示计数 loadingShowCount 增加 step\n   * @param step ? : number 默认值:1; 增加的数量；\n   * @returns number 增加后的 显示计数 loadingShowCount 值\n   */\n  incrLoadingShowCount(step){\n    step = step == undefined ? 1 : step;\n    this.constructor.incrLoadingShowCount(step);\n    return this.loadingShowCount += step;\n  }\n\n  /**\n   * 将 加载状态指示的显示计数 loadingShowCount 减少 step\n   * @param step ? : number 默认值:1; 减少的数量；\n   * @returns number 减少后的 显示计数 loadingShowCount 值\n   */\n  decrLoadingShowCount(step){\n    step = step == undefined ? 1 : step;\n    this.constructor.decrLoadingShowCount(step);\n    return this.loadingShowCount -= step;\n  }\n\n\n  //显示计数：结束\n\n\n\n\n  //完成计数：开始\n\n\n\n  /**\n   * 同时 设置 全局默认的 requestDoneAgain 和 requestDoneAgain 配置\n   */\n  static set doneAgain(newValue){\n    this.loadingDoneAgain = newValue;\n    this.requestDoneAgain = newValue;\n  }\n\n  /**\n   * 同时 设置 默认的 requestDoneAgain 和 requestDoneAgain 配置\n   */\n  set doneAgain(newValue){\n    this.loadingDoneAgain = newValue;\n    this.requestDoneAgain = newValue;\n  }\n\n  //loading完成计数：开始\n\n  static get loadingDoneCountManager(){\n    if (!this._loadingDoneCountManager) {\n      let doneCountManager = new NamedDoneCountManager();\n      doneCountManager.urlAsDoneCountName = true;\n      this._loadingDoneCountManager = doneCountManager;\n    }\n\n    return this._loadingDoneCountManager\n  }\n\n  get loadingDoneCountManager(){\n    if (!this._loadingDoneCountManager) {\n      let doneCountManager = new NamedDoneCountManager();\n      doneCountManager.urlAsDoneCountName = true;\n      this._loadingDoneCountManager = doneCountManager;\n    }\n\n    return this._loadingDoneCountManager\n  }\n\n\n  /**\n   *\n   * @param httpDoneAgainOpts : HttpDoneAgainOptions\n   * @returns {*}\n   */\n  unsafeDoneAgain_Loading(httpDoneAgainOpts){\n    let key = httpDoneAgainOpts && httpDoneAgainOpts.key;\n    if (key == undefined){\n      return;\n    }\n\n    if  (httpDoneAgainOpts.global){\n      return this.constructor.loadingDoneCountManager.unsafeDoneAgain(httpDoneAgainOpts);\n    }else {\n      return  this.loadingDoneCountManager.unsafeDoneAgain(httpDoneAgainOpts);\n    }\n\n  }\n\n\n  doneAgain_Loading(httpDoneAgainOpts){\n\n    let key = httpDoneAgainOpts && httpDoneAgainOpts.key;\n    if (key == undefined){\n      return;\n    }\n\n    if  (httpDoneAgainOpts.global){\n      return this.constructor.loadingDoneCountManager.doneAgain(httpDoneAgainOpts);\n    }else {\n      return  this.loadingDoneCountManager.doneAgain(httpDoneAgainOpts);\n    }\n\n\n  }\n\n  /**\n   *\n   * @param httpDoneAgainOpts : HttpDoneAgainOptions\n   * HttpDoneAgainOptions = {...DoneAgainOptions,global:boolean}\n   * @returns {*}\n   */\n  registerDoneCount_Loading(httpDoneAgainOpts){\n\n    let key = httpDoneAgainOpts && httpDoneAgainOpts.key;\n    if (key == undefined){\n      return;\n    }\n\n    if  (httpDoneAgainOpts.global){\n      return this.constructor.loadingDoneCountManager.register(httpDoneAgainOpts);\n    }else {\n      return  this.loadingDoneCountManager.register(httpDoneAgainOpts);\n    }\n\n  }\n\n\n  /**\n   * 设置 和 获取 全局默认的 loadingDoneAgain 配置\n   */\n  static get loadingDoneAgain(){\n    return Object.defineProxyProperties({},this.loadingDoneCountManager,_doneAgainProxyProps);\n  }\n\n  static set loadingDoneAgain(newValue){\n    if  (newValue){\n      Object.assign(this.loadingDoneCountManager,newValue);\n    }\n  }\n\n  /**\n   * 设置 和 获取 默认的 loadingDoneAgain 配置\n   */\n  get loadingDoneAgain(){\n    return Object.defineProxyProperties({},this.loadingDoneCountManager,_doneAgainProxyProps);\n  }\n\n  set loadingDoneAgain(newValue){\n    if  (newValue){\n      Object.assign(this.loadingDoneCountManager,newValue);\n    }\n  }\n\n\n  //loading完成计数：结束\n\n\n\n\n\n\n  //request完成计数：开始\n\n  static get requestDoneCountManager(){\n    if (!this._requestDoneCountManager) {\n      let doneCountManager = new NamedDoneCountManager();\n      doneCountManager.urlAsDoneCountName = true;\n      this._requestDoneCountManager = doneCountManager;\n    }\n\n    return this._requestDoneCountManager\n  }\n\n  get requestDoneCountManager(){\n    if (!this._requestDoneCountManager) {\n      let doneCountManager = new NamedDoneCountManager();\n      doneCountManager.urlAsDoneCountName = true;\n      this._requestDoneCountManager = doneCountManager;\n    }\n\n    return this._requestDoneCountManager\n  }\n\n\n\n\n  unsafeDoneAgain_Request(httpDoneAgainOpts){\n\n    let key = httpDoneAgainOpts && httpDoneAgainOpts.key;\n    if (key == undefined){\n      return;\n    }\n\n    if  (httpDoneAgainOpts.global){\n      return this.constructor.requestDoneCountManager.unsafeDoneAgain(httpDoneAgainOpts);\n    }else {\n      return  this.requestDoneCountManager.unsafeDoneAgain(httpDoneAgainOpts);\n    }\n  }\n\n\n  doneAgain_Request(httpDoneAgainOpts){\n\n    let key = httpDoneAgainOpts && httpDoneAgainOpts.key;\n    if (key == undefined){\n      return;\n    }\n\n    if  (httpDoneAgainOpts.global){\n      return this.constructor.requestDoneCountManager.doneAgain(httpDoneAgainOpts);\n    }else {\n      return  this.requestDoneCountManager.doneAgain(httpDoneAgainOpts);\n    }\n\n  }\n\n  registerDoneCount_Request(httpDoneAgainOpts){\n\n    let key = httpDoneAgainOpts && httpDoneAgainOpts.key;\n    if (key == undefined){\n      return;\n    }\n\n    if  (httpDoneAgainOpts.global){\n      return this.constructor.requestDoneCountManager.register(httpDoneAgainOpts);\n    }else {\n      return  this.requestDoneCountManager.register(httpDoneAgainOpts);\n    }\n\n  }\n\n\n  /**\n   * 设置 和 获取 全局默认的 requestDoneAgain 配置\n   */\n  static get requestDoneAgain(){\n    return Object.defineProxyProperties({},this.requestDoneCountManager,_doneAgainProxyProps);\n  }\n\n  static set requestDoneAgain(newValue){\n    if  (newValue){\n      Object.assign(this.requestDoneCountManager,newValue);\n    }\n  }\n\n\n  /**\n   * 设置 和 获取 默认的 requestDoneAgain 配置\n   */\n  get requestDoneAgain(){\n    return Object.defineProxyProperties({},this.requestDoneCountManager,_doneAgainProxyProps);\n  }\n\n  set requestDoneAgain(newValue){\n    if  (newValue){\n      Object.assign(this.requestDoneCountManager,newValue);\n    }\n  }\n\n\n\n  //request完成计数：结束\n\n\n  //完成计数：结束\n\n\n\n\n\n\n\n\n\n\n  /**\n   * 属性的格式列表\n   */\n  propFormats = [{caseType: \"N\"}, {caseType: \"L\"}, {caseType: \"U\"}, {separator: \"-\", caseType: \"L\"}, {\n    separator: \"-\",\n    caseType: \"U\"\n  }, {separator: \"-\", caseType: \"N\"}];\n\n\n  /**\n   * 有请求体的请求方式列表\n   * @type {string[]}\n   */\n  haveHttpBodyMethods = [\"post\"];\n\n\n  set reqTransforms(newValue) {\n\n    if (newValue && !Array.isArray(newValue)) {\n      newValue = [newValue];\n    }\n    this._reqTransforms = newValue;\n  }\n\n  get reqTransforms() {\n    if (!this._reqTransforms) {\n      this._reqTransforms = [];\n    }\n\n    return this._reqTransforms;\n  }\n\n\n  set resTransforms(newValue) {\n\n    if (newValue && !Array.isArray(newValue)) {\n      newValue = [newValue];\n    }\n    this._resTransforms = newValue;\n  }\n\n  get resTransforms() {\n    if (!this._resTransforms) {\n      this._resTransforms = [];\n    }\n\n    return this._resTransforms;\n  }\n\n\n  /**\n   * 计算属性 validateHttpStatus\n   * set : newValue ?: Array<status> | (status: number) => boolean    定义 有效的 http返回状态码，可以是有效状态码的数组，也可以是返回表示状态码是否有效的布尔值的函数，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   */\n  set validateHttpStatus(newValue) {\n    let valHttpStatus = newValue;\n    if (Array.isArray(newValue)){\n      valHttpStatus = function (status) {\n        return newValue.includes(status);\n      };\n    } else if (typeof newValue != \"function\"){\n      valHttpStatus = function (status) {\n        return newValue == status;\n      };\n    }\n    this.axios.defaults.validateStatus = valHttpStatus\n  }\n\n  get validateHttpStatus() {\n    return this.axios.defaults.validateStatus;\n  }\n\n\n  // dependentPro 请求依赖的 Promise\n  set dependentPro(newValue) {\n    if (this._dependentResolve) {\n      this._dependentResolve(newValue);\n    }\n\n    this._dependentPro = newValue;\n  }\n\n  get dependentPro() {\n    if (!this._dependentPro) {\n      this._dependentPro = new Promise((resolve, reject) => {\n        this._dependentResolve = resolve;\n      });\n    }\n\n    return this._dependentPro;\n  }\n\n\n  /**\n   * 请求头的配置对象 headers\n   * headers 可配置如下选项：\n   * headers.common : Object    配置所有请求公共的请求头字段\n   * headers.get : Object    配置 get 请求的请求头字段\n   * headers.put : Object    配置 put 请求的请求头字段\n   * headers.post : Object    配置 post 请求的请求头字段\n   * headers.patch : Object    配置 patch 请求的请求头字段\n   * headers.head : Object    配置 head 请求的请求头字段\n   * headers.delete : Object    配置 delete 请求的请求头字段\n   */\n  set headers(newValue) {\n\n    if (newValue) {\n      Object.keys(newValue).forEach((headerKey) => {\n        Object.assign(this.axios.defaults.headers[headerKey], newValue[headerKey]);\n      })\n    }\n\n  }\n\n\n  get headers() {\n    return this.axios.defaults.headers;\n  }\n\n\n  /**\n   * 设置 headers\n   * @param key : string    headers的键\n   * @param value : string   值\n   * @param methods ? : Method | [Method]   默认值：common，表示对所有的请求方式都有效； key 和 value 被应用到的请求方式的列表；\n   */\n  setHeaders(key, value, methods = \"common\") {\n    let headers = this.axios.defaults.headers;\n\n    if (!Array.isArray(methods)) {\n      methods = [methods];\n    }\n\n    methods.forEach(function (method) {\n\n      method = method.toLowerCase();\n      let methodHeader = headers[method];\n      if (!methodHeader) {\n        methodHeader = {};\n      }\n\n      methodHeader[key] = value;\n      headers[method] = methodHeader;\n\n    });\n\n\n    this.axios.defaults.headers = headers;\n  }\n\n\n  /**\n   * 获取 相应请求方式的 headers\n   * @param method ? : Method   默认值：common，表示获取通用的头；\n   */\n  getHeaders(method) {\n    var headers = this.axios.defaults.headers;\n\n    var commonHeader = headers[\"common\"];\n    if (method) {\n      method = method.toLowerCase();\n      var methodHeader = headers[method];\n\n    }\n\n    if (commonHeader || methodHeader) {\n      var finalHeader = {...commonHeader, ...methodHeader};\n    }\n\n    return finalHeader;\n  }\n\n\n  set mainDataGet(newValue) {\n    this._mainDataGet = newValue;\n  }\n\n  get mainDataGet() {\n    if (!this._mainDataGet) {\n      this._mainDataGet = function (responseData) {\n        return responseData;\n      };\n    }\n\n    return this._mainDataGet;\n  }\n\n\n  set baseURL(newValue) {\n    this.axios.defaults.baseURL = newValue\n  }\n\n  get baseURL() {\n    return this.axios.defaults.baseURL;\n  }\n\n\n  set method(newValue) {\n    this.axios.defaults.method = newValue;\n  }\n\n  get method() {\n    return this.axios.defaults.method;\n  }\n\n\n  set authorization(newValue) {\n    if (newValue) {\n      if (typeof newValue == \"object\") {\n        newValue = JSON.stringify(newValue);\n      }\n      this.setHeaders('Authorization', newValue);\n    }\n  }\n\n\n  set contentType(newValue) {\n    if (newValue) {\n      this.setHeaders('Content-Type', newValue, \"post\");\n    }\n  }\n\n\n  /**\n   * 添加公共参数\n   * @param reqOptions : ReqOptions\n   * @returns ReqOptions\n   */\n  addPublicData(reqOptions) {\n    //  公共参数\n    let publicData = this.publicData;\n\n    if  (typeof publicData == \"function\"){\n      publicData = this.publicData(reqOptions);\n    }\n\n    if (publicData) {\n      publicData = Object.assign({}, publicData);\n    } else {\n      return reqOptions;\n    }\n\n    let {params, data, method = this.method} = reqOptions;\n\n    if (params) {\n      params = {...publicData, ...params};\n    }\n\n\n    if (typeof data == \"object\") {\n\n      if (data.constructor.name == \"Object\") {\n\n        data = {...publicData, ...data};\n\n      } else if (data instanceof FormData) {\n\n        Object.keys(publicData).forEach(function (key) {\n          data.set(key, publicData[key]);\n        });\n\n      }\n    }\n\n    if (!params && !data) {\n      if (method && this.haveHttpBodyMethods.includes(method.toLowerCase())) {\n        data = publicData;\n      } else {\n        params = publicData;\n      }\n    }\n\n    if (params) {\n      reqOptions.params = params;\n    }\n\n    if (data) {\n      reqOptions.data = data;\n    }\n\n    return reqOptions;\n  }\n\n\n\n  /**\n   * 合并 完成计数 DoneCount 相关的选项\n   * @param reqOptions\n   * @private\n   */\n  _mergeDoneAgainOptions(reqOptions){\n    let mergeDCOptions = {};\n\n    let doneAgain = reqOptions.doneAgain;\n    var {urlPath,loadingDoneAgain = doneAgain,requestDoneAgain = doneAgain} = reqOptions;\n\n    if (loadingDoneAgain){\n      mergeDCOptions.loadingDoneAgain = this._perfectDoneAgainOptions(loadingDoneAgain,urlPath,true);\n    }\n\n\n    if (requestDoneAgain){\n      mergeDCOptions.requestDoneAgain = this._perfectDoneAgainOptions(requestDoneAgain,urlPath);\n    }\n\n    return mergeDCOptions;\n  }\n\n\n  _perfectDoneAgainOptions(doneAgainOpts,urlPath,forLoading){\n\n    if (typeof doneAgainOpts == \"object\") {\n      var {failDoneAgain,...doneAgain} = doneAgainOpts;\n    }else {\n      doneAgain = {key:doneAgainOpts};\n    }\n\n    let {namesOrNum,names,doneNum,urlAsDoneCountName,...doneAgainOther} = doneAgain;\n\n    if  (!urlAsDoneCountName){\n      let defaultDoneAgain = doneAgain.global ? (forLoading ? this.constructor.loadingDoneAgain : this.constructor.requestDoneAgain ) : (forLoading ? this.loadingDoneAgain : this.requestDoneAgain);\n      urlAsDoneCountName = defaultDoneAgain.urlAsDoneCountName;\n    }\n\n    if (urlAsDoneCountName && (namesOrNum || names || doneNum) == undefined) {\n      doneAgain.names = urlPath;\n    }\n\n    if (failDoneAgain){\n\n      let failDAType = typeof failDoneAgain;\n      if (failDAType == \"number\" ){\n        failDoneAgain = {doneNum:failDoneAgain};\n      }else if (failDAType == \"string\" || Array.isArray(failDoneAgain)){\n        failDoneAgain = {names:failDoneAgain};\n      }\n\n      failDoneAgain = Object.assign({},doneAgainOther,failDoneAgain);\n      doneAgain.failDoneAgain = failDoneAgain;\n    }\n\n    return doneAgain;\n  }\n\n\n\n\n\n  /**\n   * 发送请求\n   * @param reqOptions : Object  请求的选项对象，\n   *\n   * reqOptions 中可配置的字段如下：\n   *\n   * urlPath : string    url路径\n   * method  : string    请求方式\n   * data  : Object    请求的数据，这些数据将被放入请求体中\n   * params  : Object    请求的参数，这些参数将会被序列化放入请求的URL后面\n   * header | headers  : Object    请求头对象\n   * responseType : string         表明服务器返回的数据类型，如：'json','text' 等等\n   * successPrompt : boolean    是否启用全局的成功提示；\n   * failPrompt  : boolean    是启用用全局的失败提示;\n   * mainData  : boolean    当请求成功时，是否返回经过 mainDataGet 处理过的数据；\n   * showLoading  : boolean    是否启用加载状态指示；\n   * loadingDelay  : number    加载状态指示的延时显示时间，单位：毫秒；默认值：0\n   * loadText  : string   加载的提示文本\n   * dependent : boolean   设置请求是否依赖 dependentPro\n   * dependResultHandle : (result,reqOptions)=> HandleResult : ReqOptions || boolean || null || undefined    依赖结果处理器，当请求有依赖时，在 依赖解决之后 请求解决之前 调用该处理器；\n   * 注意：\n   * - 当 HandleResult 为 false 时，会取消请求；\n   * - 当 HandleResult 为 非假值时， 会使用 HandleResult 进行请求；\n   * - 当 HandleResult 为 除 false 之外的假值时，会使用 原来的 reqOptions 进行请求；\n   * validateHttpStatus ?: number | string | Array<status> | (status: number) => boolean    定义 有效的 http返回状态码，可以是有效状态码 或 有效状态码的数组，也可以是返回表示状态码是否有效的布尔值的函数，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   * validateDataStatus ?: (responseData: any,reqOptions:ReqOptions) => boolean   定义 后台数据的返回的状态码的 的有效性，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   *\n   * addInfoInRes ?: boolean    可选；默认值：false；是否在响应数据中添加额外的信息； 当值为 true 时，会在失败 或 成功时返回一个数组，数据的中第1个元素就是请求真正的响应数据 或 错误信息，第2个元素是这种格式的对象 : {doneCount:DoneCount,doneCountManager:DoneCountManager,http:ByHttp}\n   * doneAgain ?: HttpDoneAgainOptions    可选；完成计数的配置对象；如果 loadingDoneAgain 或 requestDoneAgain 未配置，则会采用 doneAgain；\n   * loadingDoneAgain ?: HttpDoneAgainOptions   可选；loading完成计数的配置对象；如果 loadingDoneAgain  未配置，则会采用 doneAgain；\n   * requestDoneAgain ?: HttpDoneAgainOptions   可选；request完成计数的配置对象；如果 requestDoneAgain  未配置，则会采用 doneAgain；\n   *\n   * @returns AxiosPromise    请求的 AxiosPromise 对象\n   *\n   */\n  request(reqOptions) {\n\n    let {dependent = this.dependent, dependResultHandle = this.dependResultHandle} = reqOptions;\n\n    if (dependent) {\n      return this.dependentPro.then((dependentResult) => {\n        let depReqOptions = dependResultHandle && dependResultHandle.call(this,dependentResult, reqOptions);\n\n        if (depReqOptions == false) {\n          return Promise.reject(\"请求被依赖阻止！\")\n        } else {\n          depReqOptions = depReqOptions || reqOptions;\n          return this._request(depReqOptions)\n        }\n\n      });\n    } else {\n      return this._request(reqOptions)\n    }\n\n  }\n\n  _request(reqOptions) {\n    let addPublicOptions = this.addPublicData(reqOptions);\n\n    reqOptions = this.reqTransforms.reduce( (options, transform)=> {\n      let newOptions = transform.call(this,options);\n      return newOptions;\n    }, addPublicOptions);\n\n    var {urlPath, validateHttpStatus, validateDataStatus = this.validateDataStatus, successPrompt = this.successPrompt, failPrompt = this.failPrompt, mainData = this.mainData, showLoading = this.showLoading,loadingDelay=this.loadingDelay, loadText = this.loadText, dependent, dependResultHandle,doneAgain,loadingDoneAgain,requestDoneAgain,addInfoInRes=this.addInfoInRes, ...otherConfig} = reqOptions;\n\n    let httpDoneAgainOptsMap = this._mergeDoneAgainOptions({urlPath,doneAgain,loadingDoneAgain,requestDoneAgain});\n    loadingDoneAgain = httpDoneAgainOptsMap.loadingDoneAgain;\n    requestDoneAgain = httpDoneAgainOptsMap.requestDoneAgain;\n\n    var loadingDoneCount = this.registerDoneCount_Loading(loadingDoneAgain);\n    var loadingDoneCountManager = (loadingDoneAgain && loadingDoneAgain.global) ? this.constructor.loadingDoneCountManager : this.loadingDoneCountManager;\n\n    var requestDoneCount = this.registerDoneCount_Request(requestDoneAgain);\n    var requestDoneCountManager = (requestDoneAgain && requestDoneAgain.global) ? this.constructor.requestDoneCountManager : this.requestDoneCountManager;\n\n\n    let reqConfig = {\n      url: urlPath,\n      ...otherConfig\n    };\n\n\n    let header = reqOptions.findValueOfKeys([\"header\", \"headers\"]);\n    if (header) {\n      reqConfig.headers = header;\n    }\n\n    let responseType = reqOptions.findValueForKeyFormats(\"responseType\", this.propFormats);\n    if (responseType) {\n      reqConfig.responsetype = responseType;\n    }\n\n    if (validateHttpStatus) {\n      let valHttpStatus = validateHttpStatus;\n      if (Array.isArray(validateHttpStatus)){\n        valHttpStatus = function (status) {\n          return validateHttpStatus.some(function (valiStatus) {\n            return valiStatus == status || Number(valiStatus) == Number(status) || String(valiStatus) == String(status)\n          });\n        };\n      } else if (typeof validateHttpStatus != \"function\"){\n        valHttpStatus = function (status) {\n          return validateHttpStatus == status  || Number(validateHttpStatus) == Number(status) || String(validateHttpStatus) == String(status) ;\n        };\n      }\n      reqConfig.validateStatus = valHttpStatus;\n    }\n\n\n    if (showLoading) {\n\n\n      if  (this.startLoadingHandle){\n\n        //mark:显示加载指示器\n        var loadingIsStarted = false;\n\n        var performStartLoadHandle = ()=>{\n          loadingIsStarted = true;\n\n          var step = this.startLoadingHandle.call(this,loadText, reqOptions,{showCount:this.loadingShowCount,globalShowCount:this.constructor.loadingShowCount,doneCount:loadingDoneCount,doneCountManager:loadingDoneCountManager,http:this});\n          this.incrLoadingShowCount(step);\n        };\n\n        if (loadingDelay>0){\n          var loadingTimeoutID = setTimeout(performStartLoadHandle,loadingDelay);\n        } else{\n          performStartLoadHandle();\n        }\n\n\n      }\n\n\n    }\n\n    if (this.startRequestHandle){\n      this.startRequestHandle(reqOptions,{\n        loadText,showCount:this.loadingShowCount,globalShowCount:this.constructor.loadingShowCount,\n        loadingDoneAgain,loadingDoneCount,loadingDoneCountManager,\n        requestDoneAgain,requestDoneCount,requestDoneCountManager,\n        http:this});\n    }\n\n\n\n\n    var completeHandle = (succeed,respData)=>{\n      //doneAgain：开始\n      loadingDoneCount = this.unsafeDoneAgain_Loading(loadingDoneAgain);\n      requestDoneCount = this.unsafeDoneAgain_Request(requestDoneAgain);\n      if (!succeed){\n        var loadingDoneAgainOnFail = loadingDoneAgain && loadingDoneAgain.failDoneAgain;\n        if (loadingDoneAgainOnFail) {\n          var loadingDoneCountOnFail = this.doneAgain_Loading(loadingDoneAgainOnFail);\n        }\n\n        var requestDoneAgainOnFail = requestDoneAgain && requestDoneAgain.failDoneAgain;\n        if (requestDoneAgainOnFail) {\n          var requestDoneCountOnFail = this.doneAgain_Loading(requestDoneAgainOnFail);\n        }\n\n      }\n      //doneAgain：结束\n\n      //endLoadingHandle：开始\n      if (showLoading) {\n        loadingTimeoutID && clearTimeout(loadingTimeoutID);\n\n        if (loadingIsStarted && this.endLoadingHandle) {\n          //mark:关闭加载指示器\n          var step = this.endLoadingHandle.call(this,succeed,reqOptions,respData,{showCount:this.loadingShowCount,globalShowCount:this.constructor.loadingShowCount,doneCount:loadingDoneCount,doneCountOnFail:loadingDoneCountOnFail,doneCountManager:loadingDoneCountManager,http:this});\n          this.decrLoadingShowCount(step);\n        }\n\n      }\n\n      //endLoadingHandle：结束\n\n\n      //endRequestHandle：开始\n      if (this.endRequestHandle){\n        this.endRequestHandle(succeed,reqOptions,respData,{\n          loadText,showCount:this.loadingShowCount,globalShowCount:this.constructor.loadingShowCount,\n          loadingDoneAgain,loadingDoneCount,loadingDoneCountOnFail,loadingDoneCountManager,\n          requestDoneAgain,requestDoneCount,requestDoneCountOnFail,requestDoneCountManager,\n          http:this});\n      }\n      //endRequestHandle：结束\n\n    };\n\n\n\n    let axiosPromise = this.axios.request(reqConfig);\n\n    axiosPromise = axiosPromise.then((response) => {\n\n      response = this.resTransforms.reduce( (res, transform)=> {\n        let newRes = transform.call(this,res, reqOptions);\n        return newRes;\n      }, response);\n\n      let respData = response.data;\n\n\n      if (validateDataStatus && !validateDataStatus.call(this,respData,reqOptions)) {\n        throw respData\n      }\n\n\n      if (successPrompt && this.promptHandle) {\n        // mark: 成功的弹窗提示\n        this.promptHandle(respData, true);\n      }\n\n\n      if (mainData) {\n        respData = this.mainDataGet(respData);\n      }\n\n      completeHandle(true,respData);\n\n      if (addInfoInRes){\n        respData = [respData,{doneCount:requestDoneCount,doneCountManager:requestDoneCountManager,http:this}];\n      }\n\n      return respData;\n\n\n    }).catch((error) => {\n\n      if (failPrompt && this.promptHandle) {\n        //mark: 失败的弹窗提示\n        this.promptHandle(error, false);\n      }\n\n      let throwData = error.response || error;\n\n      completeHandle(false,throwData);\n\n      if (addInfoInRes){\n        throwData = [throwData,{doneCount:requestDoneCount,doneCountManager:requestDoneCountManager,http:this}];\n      }\n\n      throw throwData;\n\n    });\n\n\n    return axiosPromise\n\n  }\n\n\n  /**\n   * 发送get请求\n   * @param options : ReqOptions   get请求的选项对象;\n   *\n   *\n   * options 中可配置的字段如下：\n   *\n   * urlPath : string    url路径\n   * params  : Object    请求的参数，这些参数将会被序列化放入请求的URL后面\n   * header | headers  : Object    请求头对象\n   * successPrompt : boolean    是否启用全局的成功提示；\n   * failPrompt  : boolean    是启用用全局的失败提示;\n   * mainData  : boolean    当请求成功时，是否返回经过 mainDataGet 处理过的数据；\n   * showLoading  : boolean    是否启用加载状态指示；\n   * loadingDelay  : number    加载状态指示的延时显示时间，单位：毫秒；默认值：0\n   * loadText  : string   加载的提示文本\n   * dependent : boolean   设置请求是否依赖 dependentPro\n   * dependResultHandle : (result,reqOptions)=> HandleResult : ReqOptions || boolean || null || undefined    依赖结果处理器，当请求有依赖时，在 依赖解决之后 请求解决之前 调用该处理器；\n   * 注意：\n   * - 当 HandleResult 为 false 时，会取消请求；\n   * - 当 HandleResult 为 非假值时， 会使用 HandleResult 进行请求；\n   * - 当 HandleResult 为 除 false 之外的假值时，会使用 原来的 reqOptions 进行请求；\n   * validateHttpStatus ?: number | string | Array<status> | (status: number) => boolean    定义 有效的 http返回状态码，可以是有效状态码 或 有效状态码的数组，也可以是返回表示状态码是否有效的布尔值的函数，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   * validateDataStatus ?: (responseData: any,reqOptions:ReqOptions) => boolean   定义 后台数据的返回的状态码的 的有效性，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   * @returns AxiosPromise    请求的 AxiosPromise 对象\n   *\n   */\n  get(options) {\n    options.method = \"get\";\n    return this.request(options);\n  }\n\n\n  /**\n   * 发送post请求\n   * @param options : ReqOptions\n   *\n   * options 中可配置的字段如下：\n   *\n   * urlPath : string    url路径\n   * data  : Object    请求的数据，这些数据将被放入请求体中\n   * params  : Object    请求的参数，这些参数将会被序列化放入请求的URL后面\n   * contentType  : string    请求头的'Content-Type'字段的值\n   * header | headers  : Object    请求头对象\n   * successPrompt : boolean    是否启用全局的成功提示；\n   * failPrompt  : boolean    是启用用全局的失败提示;\n   * mainData  : boolean    当请求成功时，是否返回经过 mainDataGet 处理过的数据；\n   * showLoading  : boolean    是否启用加载状态指示；\n   * loadingDelay  : number    加载状态指示的延时显示时间，单位：毫秒；默认值：0\n   * loadText  : string   加载的提示文本\n   * dependent : boolean   设置请求是否依赖 dependentPro\n   * dependResultHandle : (result,reqOptions)=> HandleResult : ReqOptions || boolean || null || undefined    依赖结果处理器，当请求有依赖时，在 依赖解决之后 请求解决之前 调用该处理器；\n   * 注意：\n   * - 当 HandleResult 为 false 时，会取消请求；\n   * - 当 HandleResult 为 非假值时， 会使用 HandleResult 进行请求；\n   * - 当 HandleResult 为 除 false 之外的假值时，会使用 原来的 reqOptions 进行请求；\n   * validateHttpStatus ?: number | string | Array<status> | (status: number) => boolean    定义 有效的 http返回状态码，可以是有效状态码 或 有效状态码的数组，也可以是返回表示状态码是否有效的布尔值的函数，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   * validateDataStatus ?: (responseData: any,reqOptions:ReqOptions) => boolean   定义 后台数据的返回的状态码的 的有效性，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   *\n   * @returns AxiosPromise    请求的 AxiosPromise 对象\n   *\n   */\n  post(options) {\n    let {contentType, ...reqOptions} = options;\n\n    if (contentType) {\n      reqOptions.headers = {...reqOptions.headers, 'Content-Type': contentType};\n    }\n\n    reqOptions.method = \"post\";\n\n    return this.request(reqOptions);\n  }\n\n\n  /**\n   * 发送 put 请求\n   * @param options : ReqOptions\n   *\n   * options 中可配置的字段如下：\n   *\n   * urlPath : string    url路径\n   * data  : Object    请求的数据，这些数据将被放入请求体中\n   * params  : Object    请求的参数，这些参数将会被序列化放入请求的URL后面\n   * contentType  : string    请求头的'Content-Type'字段的值\n   * header | headers  : Object    请求头对象\n   * successPrompt : boolean    是否启用全局的成功提示；\n   * failPrompt  : boolean    是启用用全局的失败提示;\n   * mainData  : boolean    当请求成功时，是否返回经过 mainDataGet 处理过的数据；\n   * showLoading  : boolean    是否启用加载状态指示；\n   * loadingDelay  : number    加载状态指示的延时显示时间，单位：毫秒；默认值：0\n   * loadText  : string   加载的提示文本\n   * dependent : boolean   设置请求是否依赖 dependentPro\n   * dependResultHandle : (result,reqOptions)=> HandleResult : ReqOptions || boolean || null || undefined    依赖结果处理器，当请求有依赖时，在 依赖解决之后 请求解决之前 调用该处理器；\n   * 注意：\n   * - 当 HandleResult 为 false 时，会取消请求；\n   * - 当 HandleResult 为 非假值时， 会使用 HandleResult 进行请求；\n   * - 当 HandleResult 为 除 false 之外的假值时，会使用 原来的 reqOptions 进行请求；\n   * validateHttpStatus ?: number | string | Array<status> | (status: number) => boolean    定义 有效的 http返回状态码，可以是有效状态码 或 有效状态码的数组，也可以是返回表示状态码是否有效的布尔值的函数，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   * validateDataStatus ?: (responseData: any,reqOptions:ReqOptions) => boolean   定义 后台数据的返回的状态码的 的有效性，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   *\n   * @returns AxiosPromise    请求的 AxiosPromise 对象\n   *\n   */\n  put(options) {\n    let {contentType, ...reqOptions} = options;\n\n    if (contentType) {\n      reqOptions.headers = {...reqOptions.headers, 'Content-Type': contentType};\n    }\n\n    reqOptions.method = \"put\";\n\n    return this.request(reqOptions);\n  }\n\n\n  /**\n   * 发送 patch 请求\n   * @param options : ReqOptions\n   *\n   * options 中可配置的字段如下：\n   *\n   * urlPath : string    url路径\n   * data  : Object    请求的数据，这些数据将被放入请求体中\n   * params  : Object    请求的参数，这些参数将会被序列化放入请求的URL后面\n   * contentType  : string    请求头的'Content-Type'字段的值\n   * header | headers  : Object    请求头对象\n   * successPrompt : boolean    是否启用全局的成功提示；\n   * failPrompt  : boolean    是启用用全局的失败提示;\n   * mainData  : boolean    当请求成功时，是否返回经过 mainDataGet 处理过的数据；\n   * showLoading  : boolean    是否启用加载状态指示；\n   * loadingDelay  : number    加载状态指示的延时显示时间，单位：毫秒；默认值：0\n   * loadText  : string   加载的提示文本\n   * dependent : boolean   设置请求是否依赖 dependentPro\n   * dependResultHandle : (result,reqOptions)=> HandleResult : ReqOptions || boolean || null || undefined    依赖结果处理器，当请求有依赖时，在 依赖解决之后 请求解决之前 调用该处理器；\n   * 注意：\n   * - 当 HandleResult 为 false 时，会取消请求；\n   * - 当 HandleResult 为 非假值时， 会使用 HandleResult 进行请求；\n   * - 当 HandleResult 为 除 false 之外的假值时，会使用 原来的 reqOptions 进行请求；\n   * validateHttpStatus ?: number | string | Array<status> | (status: number) => boolean    定义 有效的 http返回状态码，可以是有效状态码 或 有效状态码的数组，也可以是返回表示状态码是否有效的布尔值的函数，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   * validateDataStatus ?: (responseData: any,reqOptions:ReqOptions) => boolean   定义 后台数据的返回的状态码的 的有效性，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   *\n   * @returns AxiosPromise    请求的 AxiosPromise 对象\n   *\n   */\n  patch(options) {\n    let {contentType, ...reqOptions} = options;\n\n    if (contentType) {\n      reqOptions.headers = {...reqOptions.headers, 'Content-Type': contentType};\n    }\n\n    reqOptions.method = \"patch\";\n\n    return this.request(reqOptions);\n  }\n\n\n  /**\n   * 发送 delete 请求\n   * @param options : ReqOptions   get请求的选项对象;\n   *\n   *\n   * options 中可配置的字段如下：\n   *\n   * urlPath : string    url路径\n   * params  : Object    请求的参数，这些参数将会被序列化放入请求的URL后面\n   * header | headers  : Object    请求头对象\n   * successPrompt : boolean    是否启用全局的成功提示；\n   * failPrompt  : boolean    是启用用全局的失败提示;\n   * mainData  : boolean    当请求成功时，是否返回经过 mainDataGet 处理过的数据；\n   * showLoading  : boolean    是否启用加载状态指示；\n   * loadingDelay  : number    加载状态指示的延时显示时间，单位：毫秒；默认值：0\n   * loadText  : string   加载的提示文本\n   * dependent : boolean   设置请求是否依赖 dependentPro\n   * dependResultHandle : (result,reqOptions)=> HandleResult : ReqOptions || boolean || null || undefined    依赖结果处理器，当请求有依赖时，在 依赖解决之后 请求解决之前 调用该处理器；\n   * 注意：\n   * - 当 HandleResult 为 false 时，会取消请求；\n   * - 当 HandleResult 为 非假值时， 会使用 HandleResult 进行请求；\n   * - 当 HandleResult 为 除 false 之外的假值时，会使用 原来的 reqOptions 进行请求；\n   * validateHttpStatus ?: number | string | Array<status> | (status: number) => boolean    定义 有效的 http返回状态码，可以是有效状态码 或 有效状态码的数组，也可以是返回表示状态码是否有效的布尔值的函数，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   * validateDataStatus ?: (responseData: any,reqOptions:ReqOptions) => boolean   定义 后台数据的返回的状态码的 的有效性，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   * @returns AxiosPromise    请求的 AxiosPromise 对象\n   *\n   */\n  delete(options) {\n    options.method = \"delete\";\n    return this.request(options);\n  }\n\n\n  /**\n   * 发送 head 请求\n   * @param options : ReqOptions   get请求的选项对象;\n   *\n   *\n   * options 中可配置的字段如下：\n   *\n   * urlPath : string    url路径\n   * params  : Object    请求的参数，这些参数将会被序列化放入请求的URL后面\n   * header | headers  : Object    请求头对象\n   * successPrompt : boolean    是否启用全局的成功提示；\n   * failPrompt  : boolean    是启用用全局的失败提示;\n   * mainData  : boolean    当请求成功时，是否返回经过 mainDataGet 处理过的数据；\n   * showLoading  : boolean    是否启用加载状态指示；\n   * loadingDelay  : number    加载状态指示的延时显示时间，单位：毫秒；默认值：0\n   * loadText  : string   加载的提示文本\n   * dependent : boolean   设置请求是否依赖 dependentPro\n   * dependResultHandle : (result,reqOptions)=> HandleResult : ReqOptions || boolean || null || undefined    依赖结果处理器，当请求有依赖时，在 依赖解决之后 请求解决之前 调用该处理器；\n   * 注意：\n   * - 当 HandleResult 为 false 时，会取消请求；\n   * - 当 HandleResult 为 非假值时， 会使用 HandleResult 进行请求；\n   * - 当 HandleResult 为 除 false 之外的假值时，会使用 原来的 reqOptions 进行请求；\n   * validateHttpStatus ?: number | string | Array<status> | (status: number) => boolean    定义 有效的 http返回状态码，可以是有效状态码 或 有效状态码的数组，也可以是返回表示状态码是否有效的布尔值的函数，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   * validateDataStatus ?: (responseData: any,reqOptions:ReqOptions) => boolean   定义 后台数据的返回的状态码的 的有效性，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   * @returns AxiosPromise    请求的 AxiosPromise 对象\n   *\n   */\n  head(options) {\n    options.method = \"head\";\n    return this.request(options);\n  }\n\n\n  /**\n   * 发送 options 请求\n   * @param options : ReqOptions   get请求的选项对象;\n   *\n   *\n   * options 中可配置的字段如下：\n   *\n   * urlPath : string    url路径\n   * params  : Object    请求的参数，这些参数将会被序列化放入请求的URL后面\n   * header | headers  : Object    请求头对象\n   * successPrompt : boolean    是否启用全局的成功提示；\n   * failPrompt  : boolean    是启用用全局的失败提示;\n   * mainData  : boolean    当请求成功时，是否返回经过 mainDataGet 处理过的数据；\n   * showLoading  : boolean    是否启用加载状态指示；\n   * loadingDelay  : number    加载状态指示的延时显示时间，单位：毫秒；默认值：0\n   * loadText  : string   加载的提示文本\n   * dependent : boolean   设置请求是否依赖 dependentPro\n   * dependResultHandle : (result,reqOptions)=> HandleResult : ReqOptions || boolean || null || undefined    依赖结果处理器，当请求有依赖时，在 依赖解决之后 请求解决之前 调用该处理器；\n   * 注意：\n   * - 当 HandleResult 为 false 时，会取消请求；\n   * - 当 HandleResult 为 非假值时， 会使用 HandleResult 进行请求；\n   * - 当 HandleResult 为 除 false 之外的假值时，会使用 原来的 reqOptions 进行请求；\n   * validateHttpStatus ?: number | string | Array<status> | (status: number) => boolean    定义 有效的 http返回状态码，可以是有效状态码 或 有效状态码的数组，也可以是返回表示状态码是否有效的布尔值的函数，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   * validateDataStatus ?: (responseData: any,reqOptions:ReqOptions) => boolean   定义 后台数据的返回的状态码的 的有效性，如果返回true（或者设置成null/undefined），promise将会resolve；其他的promise将reject。\n   * @returns AxiosPromise    请求的 AxiosPromise 对象\n   *\n   */\n  options(options) {\n    options.method = \"head\";\n    return this.request(options);\n  }\n\n\n}\n\n\nexport default ByHttp;\n","module.exports = require(\"es-expand\");"],"sourceRoot":""}